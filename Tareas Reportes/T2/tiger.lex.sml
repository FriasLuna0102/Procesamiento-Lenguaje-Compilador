(*#line 31.10 "tiger.lex"*)functor TigerLexFun(structure Tokens: Tiger_TOKENS)(*#line 1.1 "tiger.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "tiger.lex"*)type pos = Tokens.linenum
type lexresult = Tokens.token

val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
val commentLevel = ref 0
val stringBuffer = ref ""
val stringStart = ref 0
val inString = ref false

fun err(p1,p2) = ErrorMsg.error p1

fun newLine pos = 
  let val oldPos = !linePos
  in lineNum := !lineNum + 1;
     linePos := pos :: oldPos
  end

fun eof() = 
  let 
    val pos = hd(!linePos)
  in 
    if !commentLevel > 0 
    then (ErrorMsg.error pos "Unclosed comment"; Tokens.EOF(pos,pos))
    else if !inString
    then (ErrorMsg.error pos "Unclosed string"; Tokens.EOF(pos,pos))
    else Tokens.EOF(pos,pos)
  end

(*#line 35.1 "tiger.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\092\094\007\007\093\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\092\007\091\007\007\007\090\007\089\088\087\086\085\084\083\081\
\\079\079\079\079\079\079\079\079\079\079\077\076\073\072\070\007\
\\007\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\069\007\068\007\007\
\\007\063\058\011\056\050\040\011\011\037\011\011\034\011\031\029\
\\011\011\011\011\021\011\018\013\011\011\011\010\009\008\007\007\
\\007"
),
 (3, 
"\095\095\095\095\095\095\095\095\095\095\094\095\095\100\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\098\095\095\095\095\096\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095"
),
 (5, 
"\101\101\101\101\101\101\101\101\101\101\102\101\101\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101\101\107\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\103\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\101\
\\101"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\014\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\015\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\016\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\017\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\019\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\020\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\026\012\012\012\012\012\012\025\
\\012\012\012\012\012\012\012\012\012\022\012\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\023\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\024\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\027\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\028\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\030\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\032\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\033\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\035\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\036\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\039\012\012\012\012\012\012\012\038\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\048\
\\012\012\012\012\012\041\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\042\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\043\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\044\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\045\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\046\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\047\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\049\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\053\012\051\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\052\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\054\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\055\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\057\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\059\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\060\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\061\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\062\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\064\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\065\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\066\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\012\012\012\012\012\012\012\012\012\012\000\000\000\000\000\000\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\000\000\000\000\012\
\\000\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\067\012\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\075\074\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\080\080\080\080\080\080\080\080\080\080\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (96, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\097\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (98, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\000\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\000\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\\000\000\000\000\104\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 169)], trans = 0},
{fin = [(N 109),(N 169)], trans = 0},
{fin = [(N 138),(N 169)], trans = 0},
{fin = [(N 107),(N 169)], trans = 0},
{fin = [(N 149),(N 169)], trans = 11},
{fin = [(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 13},
{fin = [(N 149)], trans = 14},
{fin = [(N 149)], trans = 15},
{fin = [(N 149)], trans = 16},
{fin = [(N 72),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 18},
{fin = [(N 149)], trans = 19},
{fin = [(N 23),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 21},
{fin = [(N 149)], trans = 22},
{fin = [(N 149)], trans = 23},
{fin = [(N 19),(N 149)], trans = 11},
{fin = [(N 62),(N 149)], trans = 11},
{fin = [(N 149)], trans = 26},
{fin = [(N 149)], trans = 27},
{fin = [(N 82),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 29},
{fin = [(N 41),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 31},
{fin = [(N 149)], trans = 32},
{fin = [(N 52),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 34},
{fin = [(N 149)], trans = 35},
{fin = [(N 56),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 37},
{fin = [(N 48),(N 149)], trans = 11},
{fin = [(N 85),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 40},
{fin = [(N 149)], trans = 41},
{fin = [(N 149)], trans = 42},
{fin = [(N 149)], trans = 43},
{fin = [(N 149)], trans = 44},
{fin = [(N 149)], trans = 45},
{fin = [(N 149)], trans = 46},
{fin = [(N 32),(N 149)], trans = 11},
{fin = [(N 149)], trans = 48},
{fin = [(N 66),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 50},
{fin = [(N 149)], trans = 51},
{fin = [(N 45),(N 149)], trans = 11},
{fin = [(N 149)], trans = 53},
{fin = [(N 149)], trans = 54},
{fin = [(N 77),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 56},
{fin = [(N 59),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 58},
{fin = [(N 149)], trans = 59},
{fin = [(N 149)], trans = 60},
{fin = [(N 149)], trans = 61},
{fin = [(N 38),(N 149)], trans = 11},
{fin = [(N 149),(N 169)], trans = 63},
{fin = [(N 149)], trans = 64},
{fin = [(N 149)], trans = 65},
{fin = [(N 149)], trans = 66},
{fin = [(N 91),(N 149)], trans = 11},
{fin = [(N 105),(N 169)], trans = 0},
{fin = [(N 103),(N 169)], trans = 0},
{fin = [(N 131),(N 169)], trans = 70},
{fin = [(N 134)], trans = 0},
{fin = [(N 121),(N 169)], trans = 0},
{fin = [(N 126),(N 169)], trans = 73},
{fin = [(N 124)], trans = 0},
{fin = [(N 129)], trans = 0},
{fin = [(N 97),(N 169)], trans = 0},
{fin = [(N 95),(N 169)], trans = 77},
{fin = [(N 141)], trans = 0},
{fin = [(N 144),(N 169)], trans = 79},
{fin = [(N 144)], trans = 79},
{fin = [(N 119),(N 169)], trans = 81},
{fin = [(N 6)], trans = 0},
{fin = [(N 111),(N 169)], trans = 0},
{fin = [(N 115),(N 169)], trans = 0},
{fin = [(N 93),(N 169)], trans = 0},
{fin = [(N 113),(N 169)], trans = 0},
{fin = [(N 117),(N 169)], trans = 0},
{fin = [(N 101),(N 169)], trans = 0},
{fin = [(N 99),(N 169)], trans = 0},
{fin = [(N 136),(N 169)], trans = 0},
{fin = [(N 151),(N 169)], trans = 0},
{fin = [(N 3),(N 169)], trans = 0},
{fin = [(N 1),(N 169)], trans = 0},
{fin = [(N 1)], trans = 0},
{fin = [(N 14),(N 169)], trans = 0},
{fin = [(N 14),(N 169)], trans = 96},
{fin = [(N 9)], trans = 0},
{fin = [(N 14),(N 169)], trans = 98},
{fin = [(N 12)], trans = 0},
{fin = [(N 1),(N 14),(N 169)], trans = 0},
{fin = [(N 167),(N 169)], trans = 101},
{fin = [(N 167)], trans = 101},
{fin = [(N 161),(N 169)], trans = 103},
{fin = [(N 159)], trans = 0},
{fin = [(N 156)], trans = 0},
{fin = [(N 164)], trans = 0},
{fin = [(N 153),(N 169)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val STRING = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 40.30 "tiger.lex"*)newLine yypos; continue()(*#line 778.1 "tiger.lex.sml"*)
)
| 101 => ((*#line 75.29 "tiger.lex"*)Tokens.RPAREN(yypos,yypos+1)(*#line 780.1 "tiger.lex.sml"*)
)
| 103 => ((*#line 76.29 "tiger.lex"*)Tokens.LBRACK(yypos,yypos+1)(*#line 782.1 "tiger.lex.sml"*)
)
| 105 => ((*#line 77.29 "tiger.lex"*)Tokens.RBRACK(yypos,yypos+1)(*#line 784.1 "tiger.lex.sml"*)
)
| 107 => ((*#line 78.29 "tiger.lex"*)Tokens.LBRACE(yypos,yypos+1)(*#line 786.1 "tiger.lex.sml"*)
)
| 109 => ((*#line 79.29 "tiger.lex"*)Tokens.RBRACE(yypos,yypos+1)(*#line 788.1 "tiger.lex.sml"*)
)
| 111 => ((*#line 80.29 "tiger.lex"*)Tokens.DOT(yypos,yypos+1)(*#line 790.1 "tiger.lex.sml"*)
)
| 113 => ((*#line 81.29 "tiger.lex"*)Tokens.PLUS(yypos,yypos+1)(*#line 792.1 "tiger.lex.sml"*)
)
| 115 => ((*#line 82.29 "tiger.lex"*)Tokens.MINUS(yypos,yypos+1)(*#line 794.1 "tiger.lex.sml"*)
)
| 117 => ((*#line 83.29 "tiger.lex"*)Tokens.TIMES(yypos,yypos+1)(*#line 796.1 "tiger.lex.sml"*)
)
| 119 => ((*#line 84.29 "tiger.lex"*)Tokens.DIVIDE(yypos,yypos+1)(*#line 798.1 "tiger.lex.sml"*)
)
| 12 => ((*#line 48.29 "tiger.lex"*)commentLevel := !commentLevel - 1;
                           if !commentLevel = 0 then YYBEGIN INITIAL else ();
                           continue()(*#line 802.1 "tiger.lex.sml"*)
)
| 121 => ((*#line 85.29 "tiger.lex"*)Tokens.EQ(yypos,yypos+1)(*#line 804.1 "tiger.lex.sml"*)
)
| 124 => ((*#line 86.29 "tiger.lex"*)Tokens.NEQ(yypos,yypos+2)(*#line 806.1 "tiger.lex.sml"*)
)
| 126 => ((*#line 87.29 "tiger.lex"*)Tokens.LT(yypos,yypos+1)(*#line 808.1 "tiger.lex.sml"*)
)
| 129 => ((*#line 88.29 "tiger.lex"*)Tokens.LE(yypos,yypos+2)(*#line 810.1 "tiger.lex.sml"*)
)
| 131 => ((*#line 89.29 "tiger.lex"*)Tokens.GT(yypos,yypos+1)(*#line 812.1 "tiger.lex.sml"*)
)
| 134 => ((*#line 90.29 "tiger.lex"*)Tokens.GE(yypos,yypos+2)(*#line 814.1 "tiger.lex.sml"*)
)
| 136 => ((*#line 91.29 "tiger.lex"*)Tokens.AND(yypos,yypos+1)(*#line 816.1 "tiger.lex.sml"*)
)
| 138 => ((*#line 92.29 "tiger.lex"*)Tokens.OR(yypos,yypos+1)(*#line 818.1 "tiger.lex.sml"*)
)
| 14 => ((*#line 51.29 "tiger.lex"*)continue()(*#line 820.1 "tiger.lex.sml"*)
)
| 141 => ((*#line 93.29 "tiger.lex"*)Tokens.ASSIGN(yypos,yypos+2)(*#line 822.1 "tiger.lex.sml"*)
)
| 144 => let val yytext=yymktext() in (*#line 95.29 "tiger.lex"*)Tokens.INT(valOf(Int.fromString yytext), 
                                     yypos, yypos+size yytext)(*#line 825.1 "tiger.lex.sml"*)
 end
| 149 => let val yytext=yymktext() in (*#line 98.43 "tiger.lex"*)Tokens.ID(yytext, yypos, 
                                                   yypos+size yytext)(*#line 828.1 "tiger.lex.sml"*)
 end
| 151 => ((*#line 101.28 "tiger.lex"*)YYBEGIN STRING; 
                          stringStart := yypos;
                          stringBuffer := "";
                          inString := true;
                          continue()(*#line 834.1 "tiger.lex.sml"*)
)
| 153 => ((*#line 106.28 "tiger.lex"*)YYBEGIN INITIAL;
                          inString := false;
                          Tokens.STRING(!stringBuffer, !stringStart, yypos+1)(*#line 838.1 "tiger.lex.sml"*)
)
| 156 => ((*#line 109.28 "tiger.lex"*)stringBuffer := !stringBuffer ^ "\n"; continue()(*#line 840.1 "tiger.lex.sml"*)
)
| 159 => ((*#line 110.28 "tiger.lex"*)stringBuffer := !stringBuffer ^ "\t"; continue()(*#line 842.1 "tiger.lex.sml"*)
)
| 161 => ((*#line 111.28 "tiger.lex"*)stringBuffer := !stringBuffer ^ "\\"; continue()(*#line 844.1 "tiger.lex.sml"*)
)
| 164 => ((*#line 112.28 "tiger.lex"*)stringBuffer := !stringBuffer ^ "\""; continue()(*#line 846.1 "tiger.lex.sml"*)
)
| 167 => let val yytext=yymktext() in (*#line 113.28 "tiger.lex"*)stringBuffer := !stringBuffer ^ yytext; continue()(*#line 848.1 "tiger.lex.sml"*)
 end
| 169 => let val yytext=yymktext() in (*#line 115.28 "tiger.lex"*)ErrorMsg.error yypos ("Illegal character " ^ yytext); 
                          continue()(*#line 851.1 "tiger.lex.sml"*)
 end
| 19 => ((*#line 53.29 "tiger.lex"*)Tokens.TYPE(yypos,yypos+4)(*#line 853.1 "tiger.lex.sml"*)
)
| 23 => ((*#line 54.29 "tiger.lex"*)Tokens.VAR(yypos,yypos+3)(*#line 855.1 "tiger.lex.sml"*)
)
| 3 => ((*#line 41.30 "tiger.lex"*)continue()(*#line 857.1 "tiger.lex.sml"*)
)
| 32 => ((*#line 55.29 "tiger.lex"*)Tokens.FUNCTION(yypos,yypos+8)(*#line 859.1 "tiger.lex.sml"*)
)
| 38 => ((*#line 56.29 "tiger.lex"*)Tokens.BREAK(yypos,yypos+5)(*#line 861.1 "tiger.lex.sml"*)
)
| 41 => ((*#line 57.29 "tiger.lex"*)Tokens.OF(yypos,yypos+2)(*#line 863.1 "tiger.lex.sml"*)
)
| 45 => ((*#line 58.29 "tiger.lex"*)Tokens.END(yypos,yypos+3)(*#line 865.1 "tiger.lex.sml"*)
)
| 48 => ((*#line 59.29 "tiger.lex"*)Tokens.IN(yypos,yypos+2)(*#line 867.1 "tiger.lex.sml"*)
)
| 52 => ((*#line 60.29 "tiger.lex"*)Tokens.NIL(yypos,yypos+3)(*#line 869.1 "tiger.lex.sml"*)
)
| 56 => ((*#line 61.29 "tiger.lex"*)Tokens.LET(yypos,yypos+3)(*#line 871.1 "tiger.lex.sml"*)
)
| 59 => ((*#line 62.29 "tiger.lex"*)Tokens.DO(yypos,yypos+2)(*#line 873.1 "tiger.lex.sml"*)
)
| 6 => ((*#line 43.29 "tiger.lex"*)commentLevel := !commentLevel + 1; 
                           YYBEGIN COMMENT; 
                           continue()(*#line 877.1 "tiger.lex.sml"*)
)
| 62 => ((*#line 63.29 "tiger.lex"*)Tokens.TO(yypos,yypos+2)(*#line 879.1 "tiger.lex.sml"*)
)
| 66 => ((*#line 64.29 "tiger.lex"*)Tokens.FOR(yypos,yypos+3)(*#line 881.1 "tiger.lex.sml"*)
)
| 72 => ((*#line 65.29 "tiger.lex"*)Tokens.WHILE(yypos,yypos+5)(*#line 883.1 "tiger.lex.sml"*)
)
| 77 => ((*#line 66.29 "tiger.lex"*)Tokens.ELSE(yypos,yypos+4)(*#line 885.1 "tiger.lex.sml"*)
)
| 82 => ((*#line 67.29 "tiger.lex"*)Tokens.THEN(yypos,yypos+4)(*#line 887.1 "tiger.lex.sml"*)
)
| 85 => ((*#line 68.29 "tiger.lex"*)Tokens.IF(yypos,yypos+2)(*#line 889.1 "tiger.lex.sml"*)
)
| 9 => ((*#line 46.29 "tiger.lex"*)commentLevel := !commentLevel + 1; 
                           continue()(*#line 892.1 "tiger.lex.sml"*)
)
| 91 => ((*#line 69.29 "tiger.lex"*)Tokens.ARRAY(yypos,yypos+5)(*#line 894.1 "tiger.lex.sml"*)
)
| 93 => ((*#line 71.29 "tiger.lex"*)Tokens.COMMA(yypos,yypos+1)(*#line 896.1 "tiger.lex.sml"*)
)
| 95 => ((*#line 72.29 "tiger.lex"*)Tokens.COLON(yypos,yypos+1)(*#line 898.1 "tiger.lex.sml"*)
)
| 97 => ((*#line 73.29 "tiger.lex"*)Tokens.SEMICOLON(yypos,yypos+1)(*#line 900.1 "tiger.lex.sml"*)
)
| 99 => ((*#line 74.29 "tiger.lex"*)Tokens.LPAREN(yypos,yypos+1)(*#line 902.1 "tiger.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
