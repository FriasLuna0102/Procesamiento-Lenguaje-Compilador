https://sosml.org/

Definición Una gramática G  es un cuarteto  (S, R, N T)
 S -> Un símbolo especial de N
 R -> Reglas gramaticales . Una regla es una tupla 
 N -> Alfabeto de no-terminales
 T  -> Alfabeto de terminales

 Regla  ( A, b)   (raiz, argumento)

Jerarquía de grámaticas
  Tipo 0 . Gramática contractiva. Modelo es máquina Turing
           Longitud raiz > longitud argumento
  Tipo 1  Gramática no contractiva
           Longitud raiz <= longitud argumento
           Longitud raiz > 1
 Tipo 2 : Gramática de Contexto Libre Autómata con memoria de pila
           Longitud raiz = 1, Un No-terminal
 Tipo 3 : Gramática regular. Autómata No determinista
          En el argumento hay, a lo sumo, un no terminal           


    2 ** 3 ** 4        


 1.- Tipo de gramática (S, R, N, T)
      Reglas grámaticales 
       S ->  QNQ
       QN -> QR
       RN -> NNR
       RQ -> NNQ
       N  -> b
       Q  -> c

     Símbolo distinguido es S
     No terminales : {S, Q, N, R}
     Terminales      {b, c}

    S -> QNQ  -> cNc ->                                             cbc        
    S -> QNQ  -> QRQ -> QNNQ -> cNNc ->                             cbbc
    S -> QNQ  -> QRQ -> QNNQ -> QRNQ -> QNNRQ -> QNNNNQ ->cNNNNc -> cbbbbc 

   L[G] = { cb^(2^n)c  / n >= 0 }

  2.- Dada la grámatica que sigue. Hallar el lenguaje que genera

      S -> a S b  | c

     No terminales : {S}
     Terminales      {a,b, c}

   Tipo de gramática: 
    1.   S ->  c                                c, acb, aacbb, aaacbbb
    2.-  S -> a S b -> a c b
    3.-  S -> a S b -> a a S b b -> a a c b b
    4.-  S -> a S b -> a a S b b -> a a a S b  b b -> a a a c b b b

   L[G] = { a^ncb^n / n >= 0}

  3. Se tiene alfabeto bits
     Se desea lenguaje con strings con cantidad pares de 1
     11, 011, 00110,   1010 
     {  (0*10*10*)+ }

 4.- Crear Gramática a partir de FSA

      q0 -> S   q1 -> A  q2 -> B q3 -> C
     
      S -> aA  | bS
      A -> aB  | bS
      B -> aC  | bS
      C -> aC  | bC | @

    Se tienen 2 cadenas
      1.-  bbaaab
      2.-  bbaabb


5.- Slides 13
    (a|b)*a a a (a|b)*      {(a|b)^n aaa (a|b)^m / m,n>= 0}

6.- Slide 17
    
                   a         b
                 ------------------
             q0    q6        q2 
             q1    q1 
       <=    q2              q2
             q3    q6        q2
             q4    q6        q2
             q5    q1        q2
       <=    q6    q6        q2

                   a         b
                 ------------------
             q0    q0        q2 
       <=    q2              q2

       <=    q5    q1        q2
             q1    q1 

  7. Gramática de Lenguaje Regular

    a.-  S -> a S | bA
         A -> b S |  ab

                       bab bbbbab   bbbbbab
         S-> bA -> bab  
         S-> bA -> bbS -> bbbA -> bbbbab 
         S-> bA -> bbS -> bbbA -> bbbbS -> bbbbbA -> bbbbbab
         
       L[G]  = {b^n bab / n > 2 }
               b*bbbab

 8.-  Lenguaje de números binarios pares
      L(1(0.1)*0)         

SML

fun fib 0 = 0
  | fib 1 = 1
  | fib n = fib (n - 1) + fib (n - 2)

fun reverse list =
let
	fun rev [] p = p
	|   rev (x::xs) p = rev xs (x::p);
in
	rev list []
end;
fun rep _ 0 = []
|   rep v n = v :: rep v (n-1);

fun factorial 0 = 1
   | factorial n = n* factorial(n -1);

(*
fun fact n  : IntInf.int =
      if n=0 then 1 else n * fact(n - 1)

val () =
      print (IntInf.toString (fact 120) ^ "\n")
*)
reverse [1,2,3,4,5,6,7,8];
rep 5 9;
factorial 10;




https://gist.github.com/CodeGradox/52fe049492044a93173482c0a254f656

(* ML-programming *)

(* Exercise 1
Write a function
   fun reverse (l: 'a list) : 'a list = ...
that reverses a list.
Ex: reverse(["A", "B", "C"]) gives ["C", "B", "A"]
 and  reverse([1, 2, 3, 4]) gives [4, 3, 2, 1]
*)

(*fun reverse list =
let
	fun rev [] p = p
	|   rev (x::xs) p = rev xs (x::p);
in
	rev list []
end; *)

(* val reverse' = fn : 'a list -> 'a list -> 'a list *)
fun reverse' [] acc = acc
|   reverse' (x::xs) acc = reverse' xs (x::acc);

(* val reverse = fn : 'a list -> 'a list *)
fun reverse list = reverse' list [];

(* Exercise 2
   Write the function
      fun rep(v, n) = ...;
   that creates a list with n occurrences of v. The function should work for arguments of any type.
   Example:
     - rep (17, 4);
     val it = [17,17,17,17] : int list
     - rep ("a", 5);
     val it = ["a","a","a","a","a"] : string list
     - rep ([1,2,3], 3);
     val it = [[1,2,3],[1,2,3],[1,2,3]] : int list list
*)

(* val rep = fn : 'a -> int -> 'a list *)
fun rep _ 0 = []
|   rep v n = v :: rep v (n-1);

(* Exercise 3
   Write the function
      fun mulall(v, l) = ...;
   that multiplies all elements in l with the integer v.
   NB! Your solution should use the map-function!
   Example:
     - mulall(~1, [2, 4, ~7, 10]);
     val it = [~2,~4,7,~10] : int list
*)

(* val mulall = fn : int -> int list -> int list *)
fun mulall v l = map (fn x => x * v) l;

(* Exercise 4
   Use the function  mulall to define the function
	fun powlist(x, n) = ...;
   that returns a list with the exponentiations x^n, x^(n-1), ... x, 1
   (where ^ denotes "to the power of" ).
   Example:
     - powlist(3, 6);
     val it = [729,243,81,27,9,3,1] : int list
*)

(* val powlist = fn : int -> int -> int list *)
fun powlist x n =
let
	(*fun inner [] = []
	|   inner (y::ys) = y :: inner (mulall x ys);*)
	fun inner [] acc = acc
	|   inner (y::ys) acc = inner ys (y :: (mulall x acc));
in
	reverse (1 :: inner (rep x n) [])
end;

(*fun powlist2 _ [] = []
|   powlist2 n (x::xs) = x :: powlist2 n (mulall n xs);
fun powlist x n = reverse (1 :: powlist2 x (rep x n));*)

(* Exercise 5
   We want to create a function  mullist, that sums up the product of two lists (which we assume to be non-empty and equally long).
   Example:
     - mullist([1, 0, ~1], [3, 4, 5]);
     val it = ~2 : int
     - mullist([1, 2, 3, 4], [1, 2, 3, 4]);
     val it = 30 : int
   (which is 1*3 + 0*4 + ~1*5 = ~2 and 1*1 + 2*2 + 3*3 + 4*4 = 30).
   The exercise should be solved in the following manner:
   a) Create a function pair which builds a list of tuples (pairs) from the two lists:
        - pair([1, 0, ~1], [3, 4, 5]);
        val it = [(1,3),(0,4),(~1,5)] : (int * int) list
        - pair([1, 2, 3, 4], [1, 2, 3, 4]);
        val it = [(1,1),(2,2),(3,3),(4,4)] : (int * int) list
   b) Multiply the pairs by using map on the list.
   c) Sum up the answer by using a fold on the list.
   (See the "Note on functionals" for information about the fold functionals.)
   d) Is your solution to (c) tail-recursive or not, and why?
*)

(* val pair = fn : 'a list -> 'b list -> ('a * 'b) list *)
fun pair [] _ = []
|   pair _ [] = []
|   pair (x::xs) (y::ys) = (x,y) :: pair xs ys;

(* val mullist = fn : int list -> int list -> int *)
fun mullist a b = foldl op+ 0 (map op* (pair a b));

(* The foldl function and pari are tail-recursive so the whole solution is also tail-recursive *)
(* fun mullist a b = foldl op+ 0 (map op* (ListPair.zip(a, b))) *)

(* Exercise 6
   Assume that a polynomial is represented by a list such that
   [3, ~2, 0, 1] is the polynomial 3x^3 - 2x^2 + 1.
   Write the function
       fun poly (x, p) = ... ;
   that computes the polynomial p for the given x.
   Example:
     - val p = [3, ~2, 0, 1];
     val p = [3,~2,0,1] : int list
     - poly(2, p);
     val it = 17 : int
     - poly(~1, p);
     val it = ~4 : int
   Hint: Use the functions mullist and powlist from previous exercises.
*)

(* val poly = fn : int -> int list -> int *)
fun poly x p = mullist p (powlist x (length p - 1));

(* Exercise 7
	Given the following definition of the function repeat
	fun repeat(f,d,l) =
	        case l of []      => d
	                | x :: l' => f(x,repeat(f,d,l'));
	where d designates a "default"-value.
	If we have a function:
	    fun minus (x:int, y:int) = x-y;
	then
	    repeat(minus, 0, [1,2,3]);
	will compute (1-(2-(3-0))) which gives the answer 2.
	Write a repeat-like function that computes (((1-2)-3)-0) which should
give the result -4.
*)

(* val repeat' = fn : ('a * 'a -> 'a) -> 'a -> 'a list -> 'a *)
fun repeat' f d [] = d
|   repeat' f d [x] = f(x, d)
|   repeat' f d (x::y::xs) = repeat' f d (f(x,y)::xs);








